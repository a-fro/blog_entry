<?php

/**
 * @file
 * Blog Entries module file
 */

/**
 * Implements hook_entity_info().
 */
function blog_entry_entity_info() {
  return array(
    'blog_entry' => array(
      'label' => t('Blog Entry'),
      'plural label' => t('Blog Entries'),
      'controller class' => 'EntityAPIController',
      'metadata controller class' => 'BlogEntryMetadataController',
      'entity class' => 'BlogEntry',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'blog_entry',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'entry_id',
        'label' => 'title',
      ),
      'bundles' => array(
        'blog_entry' => array(
          'label' => 'Blog Entries',
          'admin' => array(
            'path' => 'admin/structure/blog-entries',
            'access arguments' => array('administer blog entries'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => TRUE,
        )
      ),
      'access callback' => 'blog_entry_access',
      'admin ui' => array(
        'path' => 'admin/blog-entries',
        'controller class' => 'EntityDefaultUIController',
      ),
      'uri callback' => 'entity_class_uri',
      'module' => 'blog_entry',
      'label callback' => 'entity_class_label'
    ),
  );
}

/**
 * Implements hook_permission().
 */
function blog_entry_permission() {
  return array(
    'administer blog entries' => array(
      'title' => t('Administer Blog Entries'),
      'description' => t('Perform administration tasks and manage the structure of blog entries.'),
    ),
    'manage blog entries' => array(
      'title' => t('Manage blog entries'),
      'description' => t('Create, update or delete blog entries.'),
    ),
    'access blog entries' => array(
      'title' => t('Access blog bntries'),
      'description' => t('View for blog entries.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function blog_entry_menu() {
  $items = array();

  $items['admin/structure/blog-entries'] = array(
    'title' => 'Blog Entries',
    'description' => 'Manage Blog entries',
    'page callback' => 'blog_entry_admin_page',
    'access arguments' => array('administer blog entries'),
  );

  $items['blog/entry/%'] = array(
    'title callback' => 'blog_entry_title',
    'title arguments' => array(2),
    'page callback' => 'blog_entry_view',
    'page arguments' => array(2),
    'access callback' => 'blog_entry_access',
    'access arguments' => array('view', 2),
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function blog_entry_theme() {
  return array(
    'blog_entry_property_field' => array(
      'variables' => array(
        'label_hidden' => FALSE,
        'title_attributes' => NULL,
        'label' => '',
        'content_attributes' => NULL,
        'items' => array(),
        'item_attributes' => array(0 => ''),
        'classes' => '',
        'attributes' => '',
      ),
    ),
  );
}

/**
 * Theme function for properties.
 */
function theme_blog_entry_property_field($variables) {
  return theme_field($variables);
}

/*
 * Admin page for Blog Entries
 */
function blog_entry_admin_page() {
  return t('Administer blog entry fields and display');
}

/**
 * Checks blog entry access.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $entry
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function blog_entry_access($op, $entry = NULL, $account = NULL) {
  if (user_access('administer blog entries', $account)) {
    return TRUE;
  }

  if ($op == 'view' && user_access('access blog entries', $account)) {
    return TRUE;
  }

  if (($op == 'edit' || $op == 'create' || $op == 'delete')
    && user_access('manage blog entries', $account)
  ) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_field_extra_fields().
 */
function blog_entry_field_extra_fields() {
  $extra = array();
  $extra['blog_entry']['blog_entry'] = array(
    'form' => array(
      'author' => array(
        'label' => t('Author'),
        'description' => t('Author of the entry'),
        'weight' => -4,
      ),
      'created' => array(
        'label' => t('Created date'),
        'description' => t('Date/time the entry was created.'),
        'weight' => -3,
      ),
    ),
    'display' => array(
      'author' => array(
        'label' => t('Author'),
        'description' => t('Author of the entry.'),
        'weight' => -4,
      ),
      'created' => array(
        'label' => t('Created date'),
        'description' => t('Date/time the entry was created.'),
        'weight' => -3,
      ),
    ),
  );
  return $extra;
}

/**
 * Form definition for adding/editing blog entries
 */
function blog_entry_form($form, &$form_state, $entry = NULL) {
  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => isset($entry->title) ? $entry->title : '',
    '#required' => TRUE,
    '#weight' => -10,
  );

  field_attach_form('blog_entry', $entry, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($entry->id) ? t('Update entry') : t('Save entry'),
    '#weight' => 999,
  );
  return $form;
}

/**
 * Submit handler for the blog entry add/edit form.
 */
function blog_entry_form_submit($form, &$form_state) {
  $entry = entity_ui_form_submit_build_entity($form, $form_state);
  $entry->save();
  drupal_set_message(t('The entry <em>@title</em> has been saved.', array('@title' => $entry->title)));
  $form_state['redirect'] = 'admin/blog-entries';
}

/**
 * Loads an entry by ID.
 */
function blog_entry_load($entry_id) {
  if (empty($entry_id)) {
    return FALSE;
  }
  $entries = blog_entry_load_multiple(array($entry_id), array());

  return $entries ? reset($entries) : FALSE;
}

function blog_entry_load_multiple($entry_ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($entry_ids) && empty($conditions)) {
    return array();
  }

  return entity_load('blog_entry', $entry_ids, $conditions, $reset);
}

/**
 * Title callback for hook_menu()
 */
function blog_entry_title($entry_id) {
  $entry = blog_entry_load($entry_id);
  return $entry->label();
}

/**
 * View callback for a single blog entry
 * @see blog_entry_menu()
 */
function blog_entry_view($entry_id) {
  $entry = blog_entry_load($entry_id);
  return $entry->view();
}
